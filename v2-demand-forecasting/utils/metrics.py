# -*- coding: utf-8 -*-
"""TILDI-Demand-Forecasting-toEveryone.ipynb

Automatically generated by Colaboratory.

Original file is located at

# Demand Forecasting (AI, Data Innovation Team, CJ Express, TILDI)

## File: Baseline ML Model

 C.J. Express Group Co.,Ltd. All Rights Reserved.
  
 Year: 2021
"""

# Performance Evaluation: Overall

df_predict
result_list = []

actual = list(df_predict.select('TotalQtySale').toPandas()['TotalQtySale'])
pred = list(df_predict.select('prediction').toPandas()['prediction'])


def percentage_error(actual, predicted):
    res = np.empty(actual.shape)
    for j in range(actual.shape[0]):
        if actual[j] != 0:
            res[j] = np.absolute(actual[j] - predicted[j]) / actual[j]
        else:
            res[j] = predicted[j] / np.mean(actual)
    return res


def mape(y_true, y_pred):
    return np.mean(np.abs(percentage_error(np.asarray(y_true), np.asarray(y_pred)))) * 100


def rmsle_spark(df, label='TotalQtySale'):
    sle = ((F.log(F.col('prediction') + F.lit(1)) - F.log(F.col(label) + F.lit(1))) ** 2).alias('sle')
    df = df.select(sle)
    return np.sqrt(df.groupby().agg(F.avg('sle').alias('msle')).collect()[0][0])


def mape_spark(df, label='TotalQtySale'):
    ape = ((F.abs(F.col('prediction') - F.col(label)) * F.lit(100)) / F.col(label)).alias('ape')
    df = df.select(ape)
    return df.groupby().agg(F.avg('ape').alias('mape')).collect()[0][0]


def smape_spark(df, label='TotalQtySale'):
    sape = ((F.abs(F.col('prediction') - F.col(label)) * F.lit(100)) \
            / ((F.col('prediction') + F.col(label)) / F.lit(2))).alias('sape')
    df = df.select(sape)
    return df.groupby().agg(F.avg('sape').alias('smape')).collect()[0][0]


# for metricName in ['rmse','mse','r2','mae']:# all metrics
for metricName in ['rmse', 'mae']:
    evaluator = RegressionEvaluator(labelCol="TotalQtySale", predictionCol="prediction", metricName=metricName)
    result = evaluator.evaluate(df_predict)
    print('%s = %g' % (metricName, result))
    result_list.append(result)

# mape
mape = mape_spark(df_predict, label='TotalQtySale')
result_list.append(mape)
print("mape =", mape)

# rmsle
rmsle = rmsle_spark(df_predict, label='TotalQtySale')
result_list.append(rmsle)
print("rmsle =", rmsle)

# accuracy
acc = (1 - (np.exp(rmsle) - 1)) * 100
result_list.append(acc)
print("acc =", acc)

print(result_list)
print("Inference Process: Done")

# Performance Evaluation: OUT OF STOCK (OOS)
overall_test_number = df_predict.count()
oos_number = df_predict.filter(
    (df_predict["prediction"] < df_predict["TotalQtySale"]) & (df_predict["TotalQtySale"] != 0)).count()
print("percent of oos", oos_number * 100 / overall_test_number)
